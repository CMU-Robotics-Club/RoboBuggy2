<!-- roslaunch buggy main.launch -->

<launch>
    <arg name="controller"      default="stanley" />
    <arg name="start_dist"      default="0.0" />
    <arg name="path"      default="buggycourse_safe_1.json" />

    <include file="$(find microstrain_inertial_driver)/launch/microstrain.launch">
        <arg name="params_file" value="/rb_ws/src/buggy/INS_params.yml"/>
    </include>

    <remap from="/SC/nav/odom" to="/ekf/odometry_earth"/>
    <!-- <remap from="/buggy/input/steering" to="/SC/buggy/input/steering"/> -->

    <node name="serial_node" pkg="rosserial_python" type="serial_node.py">
        <param name="port" type="string" value="/dev/ttyUSB0"/>
        <param name="baud" type="int" value="1000000"/>
    </node>
    <node name="serial_node2" pkg="rosserial_python" type="serial_node.py">
        <param name="port" type="string" value="/dev/ttyACM1"/>
        <param name="baud" type="int" value="115200"/>
    </node>
    <node name="foxglove" pkg="foxglove_bridge" type="foxglove_bridge" />
    <node name="telematics" pkg="buggy" type="telematics.py" />
    <node name="publish_rtk_err" pkg="buggy" type="publish_rtk_err.py" output="screen"/>


    <!-- ENABLE AUTON -->
    <!-- autonsystem args: controller start_dist path buggy_name is_sim -->
    <!-- Conditional Launch Files, depending on if NAND Exists or not -->
    <arg name="autonsystem_args" default="--controller $(arg controller) --dist 0.0 --traj $(arg path) --self_name SC" />
    <node name="auton_system" pkg="buggy" type="autonsystem.py" output="screen" args="$(arg autonsystem_args)"/>
</launch>